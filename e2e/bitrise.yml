format_version: "11"
default_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git

app:
  envs:
  # Shared test secrets
  - BITRISE_KEYCHAIN_PATH: $BITRISE_KEYCHAIN_PATH
  - BITRISE_KEYCHAIN_PASSWORD: $BITRISE_KEYCHAIN_PASSWORD
  - BITFALL_APPLE_APPLE_CERTIFICATE_URL_LIST: $BITFALL_APPLE_APPLE_CERTIFICATE_URL_LIST
  - BITFALL_APPLE_IOS_CERTIFICATE_URL_LIST: $BITFALL_APPLE_IOS_CERTIFICATE_URL_LIST
  - BITFALL_APPLE_APPLE_CERTIFICATE_PASSPHRASE_LIST: $BITFALL_APPLE_APPLE_CERTIFICATE_PASSPHRASE_LIST
  - BITFALL_APPLE_IOS_CERTIFICATE_NOPASSPHRASE_URL: $BITFALL_APPLE_IOS_CERTIFICATE_NOPASSPHRASE_URL
  - BITFALL_APPLE_IOS_CERTIFICATE_PASSPHRASE_LIST: $BITFALL_APPLE_IOS_CERTIFICATE_PASSPHRASE_LIST
  - BITFALL_APPLE_PROVISIONING_PROFILE_URL_LIST: $BITFALL_APPLE_PROVISIONING_PROFILE_URL_LIST

  - BITFALL_APPSTORECONNECT_API_KEY_URL: $BITFALL_APPSTORECONNECT_API_KEY_URL
  - BITFALL_APPSTORECONNECT_API_KEY_ID: $BITFALL_APPSTORECONNECT_API_KEY_ID
  - BITFALL_APPSTORECONNECT_API_KEY_ISSUER_ID: $BITFALL_APPSTORECONNECT_API_KEY_ISSUER_ID

workflows:
  # Disabled known bad visonOS test
  # test_visionOS:
  #   description: visionOS SDK requires Xcode 15.2+
  #   steps:
  #   - bitrise-run:
  #       title: Run visionOS test if current stack supports it
  #       run_if: |-
  #           {{ and (not (envcontain "BITRISEIO_STACK_ID" "osx-xcode-15.0")) (not (envcontain "BITRISEIO_STACK_ID" "osx-xcode-15.1")) (not (envcontain "BITRISEIO_STACK_ID" "osx-xcode-14.")) }}
  #       inputs:
  #       - workflow_id: utility_test_visionOS
  #       - bitrise_config_path: ./e2e/bitrise.yml

  # utility_test_visionOS:
  #   envs:
  #   - TEST_APP_URL: https://github.com/bitrise-io/visionOS-HelloWorld
  #   - TEST_APP_BRANCH: main
  #   - TEST_APP_COMMIT: ""
  #   - BITRISE_PROJECT_PATH: World.xcodeproj
  #   - BITRISE_SCHEME: World
  #   - CODE_SIGNING_METHOD: api-key
  #   - MIN_DAYS_PROFILE_VALID: 0
  #   - FORCE_CODE_SIGN_IDENTITY: "Apple Development: Tooling Bot Bitrise"
  #   - TEAM_ID: 72SA8V3WYL
  #   - FORCE_PROV_PROFILE_SPECIFIER: ""
  #   - IPA_EXPORT_METHOD: development
  #   - IPA_EXPORT_ICLOUD_CONTAINER_ENVIRONMENT: ""
  #   - LOG_FORMATTER: xcodebuild
  #   after_run:
  #   - _run
  #   - _check_outputs
  #   - _check_exported_artifacts

  test_override_api_key_signing:
    description: Test API key based signing on a project where code signing is not managed automatically, by step inputs
    envs:
    - TEST_APP_URL: https://github.com/bitrise-io/Fruta
    - TEST_APP_BRANCH: manual-signing
    - TEST_APP_COMMIT: ""
    - BITRISE_PROJECT_PATH: Fruta.xcodeproj
    - BITRISE_SCHEME: Fruta iOS
    - DESTINATION: iOS
    - CODE_SIGNING_METHOD: api-key
    - API_KEY_PATH: $BITFALL_APPSTORECONNECT_API_KEY_URL
    - API_KEY_ID: $BITFALL_APPSTORECONNECT_API_KEY_ID
    - API_KEY_ISSUER_ID: $BITFALL_APPSTORECONNECT_API_KEY_ISSUER_ID
    - MIN_DAYS_PROFILE_VALID: 0
    - IPA_EXPORT_METHOD: development
    - LOG_FORMATTER: xcodebuild
    steps:
    - script:
        title: Unset Bitrise API connection env vars
        inputs:
        - content: |-
            #!/usr/bin/env bash
            set -ex
            envman add --key BITRISE_BUILD_URL_BACKUP --value $BITRISE_BUILD_URL
            envman add --key BITRISE_BUILD_API_TOKEN_BACKUP --value $BITRISE_BUILD_API_TOKEN
            envman unset --key BITRISE_BUILD_URL
            envman unset --key BITRISE_BUILD_API_TOKEN

    after_run:
    - _run
    - _check_outputs
    - _check_exported_artifacts
    - _restore_api_envs

  test_single_certificate_no_passphrase:
    steps:
    - script:
        inputs:
        - content: |-
            #!/bin/bash
            set -ex
            rm -rf "./_tmp"
            mkdir -p "./_tmp"
    - git::https://github.com/bitrise-steplib/bitrise-step-simple-git-clone.git@master:
        inputs:
        - repository_url: https://github.com/bitrise-io/sample-apps-ios-simple-objc.git
        - branch: bundle_id
        - clone_into_dir: ./_tmp
    - path::./:
        title: Execute step
        inputs:
        - project_path: ./_tmp/ios-simple-objc/ios-simple-objc.xcodeproj
        - scheme: ios-simple-objc
        - automatic_code_signing: api-key
        - certificate_url_list: $BITFALL_APPLE_IOS_CERTIFICATE_NOPASSPHRASE_URL
        - passphrase_list: ""
        - distribution_method: development
        - export_development_team: 72SA8V3WYL
        - verbose_log: "yes"
        - keychain_path: $BITRISE_KEYCHAIN_PATH
        - keychain_password: $BITRISE_KEYCHAIN_PASSWORD

  test_manual_signing:
    description: Tests the case when automatic code signing is disabled and the certificate installer step is used to set up code signing assets
    envs:
    - TEST_APP_URL: https://github.com/bitrise-io/sample-apps-ios-simple-objc.git
    - TEST_APP_BRANCH: new-certificates
    - BITRISE_PROJECT_PATH: ios-simple-objc/ios-simple-objc.xcodeproj
    - BITRISE_SCHEME: ios-simple-objc
    - CODE_SIGNING_METHOD: "off"
    - IPA_EXPORT_METHOD: development
    - LOG_FORMATTER: xcodebuild
    after_run:
    - _check_outputs
    - _check_exported_artifacts
    steps:
    - script:
        title: Remove temp folder
        inputs:
        - content: |-
            #!/bin/bash
            set -ex
            rm -rf "./_tmp"
            mkdir -p "./_tmp"
    - script:
        title: Remove provisioning profiles from previous runs
        run_if: .IsCI
        inputs:
        - content: |-
            #!/bin/bash
            set -ex
            rm -rf ~/Library/MobileDevice/Provisioning Profiles
    - git::https://github.com/bitrise-steplib/bitrise-step-simple-git-clone.git:
        inputs:
        - repository_url: $TEST_APP_URL
        - branch: $TEST_APP_BRANCH
        - commit: $TEST_APP_COMMIT
        - clone_into_dir: ./_tmp
    - certificate-and-profile-installer:
        inputs:
        - certificate_url: $BITFALL_APPLE_APPLE_CERTIFICATE_URL_LIST|$BITFALL_APPLE_IOS_CERTIFICATE_URL_LIST
        - certificate_passphrase: $BITFALL_APPLE_APPLE_CERTIFICATE_PASSPHRASE_LIST|$BITFALL_APPLE_IOS_CERTIFICATE_PASSPHRASE_LIST
        - provisioning_profile_url: $BITFALL_APPLE_PROVISIONING_PROFILE_URL_LIST
        - install_defaults: "no"
        - keychain_path: $BITRISE_KEYCHAIN_PATH
        - keychain_password: $BITRISE_KEYCHAIN_PASSWORD
    - path::./:
        title: Execute step
        inputs:
        - project_path: ./_tmp/$BITRISE_PROJECT_PATH
        - scheme: $BITRISE_SCHEME
        - automatic_code_signing: $CODE_SIGNING_METHOD
        - xcconfig_content: |
            COMPILER_INDEX_STORE_ENABLE = NO
            CODE_SIGN_IDENTITY = Apple Development: Tooling Bot Bitrise
        - distribution_method: $IPA_EXPORT_METHOD
        - icloud_container_environment: $IPA_EXPORT_ICLOUD_CONTAINER_ENVIRONMENT
        - export_development_team: $TEAM_ID
        - log_formatter: $LOG_FORMATTER
        - verbose_log: "yes"
        - keychain_path: $BITRISE_KEYCHAIN_PATH
        - keychain_password: $BITRISE_KEYCHAIN_PASSWORD

  test_api_key_signing_manual_fallback_on_error:
    description: |-
      Running in isolation as overwrites auth params.
    steps:
    - bitrise-run:
        inputs:
        - workflow_id: utility_test_api_key_signing_manual_fallback_on_error
        - bitrise_config_path: ./e2e/bitrise.yml

  utility_test_api_key_signing_manual_fallback_on_error:
    description: Test fallback to manual signing on code signing error
    envs:
    - TEST_APP_URL: https://github.com/bitrise-io/sample-apps-ios-simple-objc.git
    - TEST_APP_BRANCH: new-certificates
    - BITRISE_PROJECT_PATH: ios-simple-objc/ios-simple-objc.xcodeproj
    - BITRISE_SCHEME: ios-simple-objc
    - DESTINATION: detect
    - CODE_SIGNING_METHOD: api-key
    - XCCONFIG_CONTENT: |
        COMPILER_INDEX_STORE_ENABLE = NO
        CODE_SIGN_IDENTITY = Apple Development: Tooling Bot Bitrise
    - MIN_DAYS_PROFILE_VALID: 0
    - IPA_EXPORT_METHOD: development
    - LOG_FORMATTER: xcodebuild
    - FALLBACK_PROFILES: $BITFALL_APPLE_PROVISIONING_PROFILE_URL_LIST
    after_run:
    - _invalid_login
    - _run
    - _check_outputs
    - _check_exported_artifacts

  test_api_key_signing_managed:
    description: Fruta project requires Xcode 13+. Remove this conditional run if we don't run tests on Xcode 12 anymore
    steps:
    - bitrise-run:
        run_if: |-
          {{ or (enveq "IS_LATEST_STACK_XCODE" "true") (not .IsCI) }}
        inputs:
        - workflow_id: utility_test_api_key_signing_managed
        - bitrise_config_path: ./e2e/bitrise.yml

  utility_test_api_key_signing_managed:
    description: |
      Tests API key based code signing on a project with automatically managed signing.
      This should use the Xcode mechanism on Xcode13+.
    envs:
    - TEST_APP_URL: https://github.com/bitrise-io/Fruta
    - TEST_APP_BRANCH: master
    - BITRISE_PROJECT_PATH: Fruta.xcodeproj
    - BITRISE_SCHEME: Fruta iOS
    - DESTINATION: detect
    - CODE_SIGNING_METHOD: api-key
    - MIN_DAYS_PROFILE_VALID: 0
    - IPA_EXPORT_METHOD: ad-hoc
    - LOG_FORMATTER: xcodebuild
    after_run:
    - _run
    - _check_outputs
    - _check_exported_artifacts

  test_api_key_signing_manual:
    description: Fruta project requires Xcode 13+. Remove this conditional run if we don't run tests on Xcode 12 anymore
    steps:
    - bitrise-run:
        run_if: |-
          {{ or (enveq "IS_LATEST_STACK_XCODE" "true") (not .IsCI) }}
        inputs:
        - workflow_id: utility_test_api_key_signing_manual
        - bitrise_config_path: ./e2e/bitrise.yml

  utility_test_api_key_signing_manual:
    description: Test API key based signing on a project where code signing is not managed automatically
    envs:
    - TEST_APP_URL: https://github.com/bitrise-io/Fruta
    - TEST_APP_BRANCH: manual-signing
    - BITRISE_PROJECT_PATH: Fruta.xcodeproj
    - BITRISE_SCHEME: Fruta iOS
    - DESTINATION: detect
    - CODE_SIGNING_METHOD: api-key
    - MIN_DAYS_PROFILE_VALID: 0
    - IPA_EXPORT_METHOD: development
    - LOG_FORMATTER: xcodebuild
    after_run:
    - _run
    - _check_outputs
    - _check_exported_artifacts

  test_apple_id:
    description: Running Apple ID tests on a single stack to avoid 503 Service Temporarily Unavailable issue.
    steps:
    - bitrise-run:
        run_if: |-
          {{ or (enveq "IS_LATEST_STACK_XCODE" "true") (not .IsCI) }}
        inputs:
        - workflow_id: utility_test_apple_id
        - bitrise_config_path: ./e2e/bitrise.yml

  utility_test_apple_id:
    envs:
    - TEST_APP_URL: https://github.com/bitrise-io/sample-apps-ios-simple-objc.git
    - TEST_APP_BRANCH: new-certificates
    - BITRISE_PROJECT_PATH: ios-simple-objc/ios-simple-objc.xcodeproj
    - BITRISE_SCHEME: ios-simple-objc
    - DESTINATION: iOS
    - CODE_SIGNING_METHOD: apple-id
    - TEAM_ID: 72SA8V3WYL
    - MIN_DAYS_PROFILE_VALID: 0
    - IPA_EXPORT_METHOD: development
    - LOG_FORMATTER: xcodebuild
    after_run:
    - _run
    - _check_outputs
    - _check_exported_artifacts

  test_api_key_signing_manual_entitlements:
    description: Test API key based code signing on a project where code signing is not managed automatically and has special entitlements.
    envs:
    - TEST_APP_URL: https://github.com/bitrise-io/sample-apps-ios-multi-target.git
    - TEST_APP_BRANCH: entitlements
    - BITRISE_PROJECT_PATH: code-sign-test.xcodeproj
    - BITRISE_SCHEME: code-sign-test
    - DESTINATION: detect
    - CODE_SIGNING_METHOD: api-key
    - MIN_DAYS_PROFILE_VALID: 0
    - IPA_EXPORT_METHOD: app-store
    - LOG_FORMATTER: xcpretty
    after_run:
    - _run
    - _check_outputs
    - _check_exported_artifacts

  test_api_key_signing_managed_app_store:
    description: Test API key based code signing and app store export on a project where signing is managed automatically
    envs:
    - TEST_APP_URL: https://github.com/bitrise-io/sample-apps-ios-multi-target.git
    - TEST_APP_BRANCH: automatic
    - BITRISE_PROJECT_PATH: code-sign-test.xcodeproj
    - BITRISE_SCHEME: code-sign-test
    - DESTINATION: detect
    - CODE_SIGNING_METHOD: api-key
    - MIN_DAYS_PROFILE_VALID: 0
    - IPA_EXPORT_METHOD: app-store
    - LOG_FORMATTER: xcbeautify
    after_run:
    - _run
    - _check_outputs
    - _check_exported_artifacts

  test_apple_id_signing_managed_app_store:
    description: Running Apple ID tests on a single stack to avoid 503 Service Temporarily Unavailable issue.
    steps:
    - bitrise-run:
        run_if: |-
          {{ or (enveq "IS_LATEST_STACK_XCODE" "true") (not .IsCI) }}
        inputs:
        - workflow_id: utility_test_apple_id_signing_managed_app_store
        - bitrise_config_path: ./e2e/bitrise.yml

  utility_test_apple_id_signing_managed_app_store:
    description: Test Apple ID based code signing and app store export on a project where signing is managed automatically
    envs:
    - TEST_APP_URL: https://github.com/bitrise-io/sample-apps-ios-multi-target.git
    - TEST_APP_BRANCH: automatic
    - BITRISE_PROJECT_PATH: code-sign-test.xcodeproj
    - BITRISE_SCHEME: code-sign-test
    - DESTINATION: detect
    - CODE_SIGNING_METHOD: apple-id
    - TEAM_ID: 72SA8V3WYL
    - MIN_DAYS_PROFILE_VALID: 0
    - IPA_EXPORT_METHOD: app-store
    - LOG_FORMATTER: xcbeautify
    after_run:
    - _run
    - _check_outputs
    - _check_exported_artifacts

  test_cloudkit:
    envs:
    - TEST_APP_URL: https://github.com/bitrise-samples/sample-apps-ios-multi-target.git
    - TEST_APP_BRANCH: cloudkit
    - TEST_APP_COMMIT: ""
    - BITRISE_PROJECT_PATH: code-sign-test.xcodeproj
    - BITRISE_SCHEME: code-sign-test-Prod
    - DESTINATION: detect
    - CODE_SIGNING_METHOD: api-key
    - MIN_DAYS_PROFILE_VALID: 0
    - TEAM_ID: 72SA8V3WYL
    - IPA_EXPORT_METHOD: development
    - IPA_EXPORT_ICLOUD_CONTAINER_ENVIRONMENT: Production
    - LOG_FORMATTER: xcodebuild
    after_run:
    - _run
    - _check_outputs
    - _check_exported_artifacts

  test_no_app_dsym:
    envs:
    - TEST_APP_URL: https://github.com/bitrise-io/sample-apps-ios-simple-objc.git
    - TEST_APP_BRANCH: with-pods
    - TEST_APP_COMMIT: ""
    - BITRISE_PROJECT_PATH: ios-simple-objc/ios-simple-objc.xcworkspace
    - BITRISE_SCHEME: ios-simple-objc
    - DESTINATION: detect
    - CODE_SIGNING_METHOD: api-key
    - MIN_DAYS_PROFILE_VALID: 0
    - TEAM_ID: 72SA8V3WYL
    - IPA_EXPORT_METHOD: development
    - IPA_EXPORT_ICLOUD_CONTAINER_ENVIRONMENT: ""
    - LOG_FORMATTER: xcodebuild
    - DSYM_EXPECTED_COUNT: 1  # Only 1 framework dSYM
    after_run:
    - _run
    - _check_outputs
    - _check_exported_artifacts

  test_objc_artifact_name:
    envs:
    - TEST_APP_URL: https://github.com/bitrise-io/sample-apps-ios-simple-objc.git
    - TEST_APP_BRANCH: new-certificates
    - TEST_APP_COMMIT: ""
    - BITRISE_PROJECT_PATH: ios-simple-objc/ios-simple-objc.xcodeproj
    - BITRISE_SCHEME: ios-simple-objc
    - DESTINATION: detect
    - CODE_SIGNING_METHOD: api-key
    - MIN_DAYS_PROFILE_VALID: 0
    - TEAM_ID: 72SA8V3WYL
    - IPA_EXPORT_METHOD: development
    - IPA_EXPORT_ICLOUD_CONTAINER_ENVIRONMENT: ""
    - LOG_FORMATTER: xcodebuild
    - DSYM_EXPECTED_COUNT: 2
    after_run:
    - _run
    - _check_outputs
    - _check_exported_artifacts
    - _check_archive_zip

  test_multi_target:
    description: |-
      Test app with multiple targets. Also tests api-key signing with a custom min profile days valid.
      (Should use Bitrise-managed code signing assets).
    envs:
    - TEST_APP_URL: https://github.com/bitrise-samples/sample-apps-ios-multi-target.git
    - TEST_APP_BRANCH: master
    - BITRISE_PROJECT_PATH: code-sign-test.xcodeproj
    - BITRISE_SCHEME: code-sign-test
    - DESTINATION: iOS
    - CODE_SIGNING_METHOD: api-key
    - MIN_DAYS_PROFILE_VALID: 112
    - TEAM_ID: 72SA8V3WYL
    - IPA_EXPORT_METHOD: development
    - IPA_EXPORT_ICLOUD_CONTAINER_ENVIRONMENT: ""
    - LOG_FORMATTER: xcodebuild
    after_run:
    - _run
    - _check_outputs
    - _check_exported_artifacts

  test_workspace:
    envs:
    - TEST_APP_URL: https://github.com/bitrise-samples/sample-apps-ios-workspace-swift.git
    - TEST_APP_BRANCH: master
    - BITRISE_PROJECT_PATH: sample-apps-ios-workspace-swift.xcworkspace
    - BITRISE_SCHEME: sample-apps-ios-workspace-swift
    - DESTINATION: iOS
    - CODE_SIGNING_METHOD: api-key
    - MIN_DAYS_PROFILE_VALID: 0
    - TEAM_ID: 72SA8V3WYL
    - IPA_EXPORT_METHOD: development
    - IPA_EXPORT_ICLOUD_CONTAINER_ENVIRONMENT: ""
    - LOG_FORMATTER: xcodebuild
    after_run:
    - _run
    - _check_outputs
    - _check_exported_artifacts

  test_catalyst:
    envs:
    - TEST_APP_URL: https://github.com/bitrise-io/CatalystSample.git
    - TEST_APP_BRANCH: master
    - TEST_APP_COMMIT: ""
    - BITRISE_PROJECT_PATH: Catalyst Sample.xcodeproj
    - BITRISE_SCHEME: Catalyst Sample
    - DESTINATION: detect
    - CODE_SIGNING_METHOD: api-key
    - MIN_DAYS_PROFILE_VALID: 0
    - FORCE_CODE_SIGN_IDENTITY: "Apple Development: Tooling Bot Bitrise"
    - TEAM_ID: 72SA8V3WYL
    - FORCE_PROV_PROFILE_SPECIFIER: ""
    - IPA_EXPORT_METHOD: development
    - IPA_EXPORT_ICLOUD_CONTAINER_ENVIRONMENT: ""
    - LOG_FORMATTER: xcodebuild
    after_run:
    - _run
    - _check_outputs
    - _check_exported_artifacts

  _run:
    steps:
    - script:
        title: Remove temp folder
        inputs:
        - content: |-
            #!/bin/bash
            set -ex
            rm -rf "./_tmp"
            mkdir -p "./_tmp"
    - script:
        title: Remove provisioning profiles from previous runs
        run_if: .IsCI
        inputs:
        - content: |-
            #!/bin/bash
            set -ex
            rm -rf ~/Library/MobileDevice/Provisioning Profiles
    - git::https://github.com/bitrise-steplib/bitrise-step-simple-git-clone.git:
        inputs:
        - repository_url: $TEST_APP_URL
        - branch: $TEST_APP_BRANCH
        - commit: $TEST_APP_COMMIT
        - clone_into_dir: ./_tmp
    - path::./:
        title: Execute step
        inputs:
        - project_path: ./_tmp/$BITRISE_PROJECT_PATH
        - scheme: $BITRISE_SCHEME
        - platform: $DESTINATION
        - automatic_code_signing: $CODE_SIGNING_METHOD
        - min_profile_validity: $MIN_DAYS_PROFILE_VALID
        - certificate_url_list: $BITFALL_APPLE_APPLE_CERTIFICATE_URL_LIST|$BITFALL_APPLE_IOS_CERTIFICATE_URL_LIST
        - passphrase_list: $BITFALL_APPLE_APPLE_CERTIFICATE_PASSPHRASE_LIST|$BITFALL_APPLE_IOS_CERTIFICATE_PASSPHRASE_LIST
        - distribution_method: $IPA_EXPORT_METHOD
        - xcconfig_content: $XCCONFIG_CONTENT
        - icloud_container_environment: $IPA_EXPORT_ICLOUD_CONTAINER_ENVIRONMENT
        - export_development_team: $TEAM_ID
        - log_formatter: $LOG_FORMATTER
        - verbose_log: "yes"
        - keychain_path: $BITRISE_KEYCHAIN_PATH
        - keychain_password: $BITRISE_KEYCHAIN_PASSWORD
        - fallback_provisioning_profile_url_list: $FALLBACK_PROFILES
        - api_key_path: $API_KEY_PATH
        - api_key_id: $API_KEY_ID
        - api_key_issuer_id: $API_KEY_ISSUER_ID

  _check_outputs:
    steps:
    - git::https://github.com/bitrise-steplib/bitrise-step-check-step-outputs.git@main:
        is_always_run: true
        inputs:
        - envs:
        - files:
        - dirs: |-
            BITRISE_APP_DIR_PATH
            BITRISE_DSYM_DIR_PATH
            BITRISE_XCARCHIVE_PATH
        - deploy_dir: $BITRISE_DEPLOY_DIR
        - deployed_files: |-
            BITRISE_IPA_PATH
            BITRISE_DSYM_PATH
            BITRISE_XCARCHIVE_ZIP_PATH
            BITRISE_XCODEBUILD_ARCHIVE_LOG_PATH
            BITRISE_XCODEBUILD_EXPORT_ARCHIVE_LOG_PATH
        - deployed_dirs:

  _check_exported_artifacts:
    before_run:
    - _expose_xcode_version
    steps:
    - script:
        title: Validate exported artifacts
        is_always_run: true
        inputs:
        - content: |-
            #!/usr/bin/env bash

            if [[ ${XCODE_MAJOR_VERSION} -ge 14 ]]; then
              echo "Xcode 14+ does not output dSYM files "
              exit 0
            fi

            cd $BITRISE_DSYM_DIR_PATH

            if [ $(find . -name '*.dSYM' -maxdepth 1| wc -l) -eq 0 ]; then
                echo "error, there are no files in the exported dSYM path!"
                ls -la
                exit 1
            fi

            if [ $(find . -maxdepth 1 ! -path . | wc -l) -gt $(find . -name '*.dSYM' -maxdepth 1 | wc -l) ]; then
                echo "error, there are non-dSYM files in the exported dSYM path!"
                ls -la
                exit 1
            fi
    - script:
        title: Check if all dSYMs are exported
        run_if: |-
          {{ getenv "DSYM_EXPECTED_COUNT" | ne "" }}
        inputs:
        - content: |-
            #!/usr/bin/env bash
            set -ex

            if [[ ${XCODE_MAJOR_VERSION} -ge 14 ]]; then
              echo "Xcode 14+ does not output dSYM files "
              exit 0
            fi

            cd $BITRISE_DSYM_DIR_PATH

            if [ $(find . -name '*.dSYM' -maxdepth 1 | wc -l) -ne $DSYM_EXPECTED_COUNT ]; then
              echo "error, expected dSYM count ($DSYM_EXPECTED_COUNT) doesn\'t match folder contents: "
              ls -la
              exit 1
            fi

  _check_archive_zip:
    steps:
    - script:
        inputs:
        - content: |-
            set -ex

            /usr/bin/unzip $BITRISE_XCARCHIVE_ZIP_PATH -d ./_tmp

            archive_path="./_tmp/ios-simple-objcTests.xcarchive"
            infoplist_path="$archive_path/Info.plist"
            if [[ ! -f "$infoplist_path" ]]; then
              echo "$infoplist_path does not exist."
              exit 1
            fi

  _invalid_login:
    steps:
    - script:
        title: Set invalid login
        inputs:
        - content: |-
            #!/bin/env bash
            set -ex
            INVALID_BUILD_URL=./_invalid_authinfo
            echo '{"key_id": "x", "issuer_id": "x", "private_key": "x"}' > $INVALID_BUILD_URL

            BITRISE_BUILD_URL="file://$INVALID_BUILD_URL"
            BITRISE_BUILD_API_TOKEN="x"

            export BITRISE_BUILD_API_TOKEN
            export BITRISE_BUILD_API_TOKEN
            envman add --key BITRISE_BUILD_URL --value $BITRISE_BUILD_URL
            envman add --key BITRISE_BUILD_API_TOKEN --value $BITRISE_BUILD_API_TOKEN

  _expose_xcode_version:
    steps:
    - script:
        title: Expose Xcode major version
        inputs:
        - content: |-
            #!/bin/env bash
            set -e
            if [[ ! -z "$XCODE_MAJOR_VERSION" ]]; then
              echo "Xcode major version already exposed: $XCODE_MAJOR_VERSION"
              exit 0
            fi
            version=`xcodebuild -version`
            regex="Xcode ([0-9]*)."
            if [[ ! $version =~ $regex ]]; then
              echo "Failed to determine Xcode major version"
              exit 1
            fi
            xcode_major_version=${BASH_REMATCH[1]}
            echo "Xcode major version: $xcode_major_version"
            envman add --key XCODE_MAJOR_VERSION --value $xcode_major_version

  _restore_api_envs:
    steps:
    - script:
        title: Restore Bitrise API connection env vars
        inputs:
        - content: |-
            set -ex
            envman add --key BITRISE_BUILD_URL --value $BITRISE_BUILD_URL_BACKUP
            envman add --key BITRISE_BUILD_API_TOKEN --value $BITRISE_BUILD_API_TOKEN_BACKUP
